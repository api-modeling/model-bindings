{
  "openapi": "3.0.0",
  "info": {
    "title": "api.raml",
    "version": "1.0"
  },
  "paths": {
    "/about": {
      "get": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "includeSubscribed",
            "description": "When calculating the number of remaining change IDs, whether to include public files the user has opened and shared files.\nWhen set to false, this counts only change IDs for owned files and any shared or public files that the user has explicitly\nadded to a folder they own. (Default: true)\n",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "maxChangeIdCount",
            "description": "Maximum number of remaining change IDs to count",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "startChangeId",
            "description": "Change ID to start counting from when calculating number of remaining change IDs",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "about-lib_raml.About"
                }
              }
            }
          }
        }
      }
    },
    "/apps/{appId}": {
      "parameters": [
        {
          "name": "appId",
          "description": "The ID of the app.",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "app-lib_raml.App"
                }
              }
            }
          }
        }
      }
    },
    "/changes/watch": {
      "post": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "spaces",
            "description": "A comma-separated list of spaces to query. Supported values are:\n\n- **drive**\n- **appDataFolder**\n- **photos**\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "watch-lib_raml.Watch"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "watch-lib_raml.WatchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/changes/{changeId}": {
      "parameters": [
        {
          "name": "changeId",
          "description": "The ID of the change.",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "watch-lib_raml.Change"
                }
              }
            }
          }
        }
      }
    },
    "/files": {
      "post": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "uploadType",
            "description": "The type of upload request to the /upload URI. Acceptable values are:\n\n- **media** - Simple upload. Upload the media only, without any metadata.\n- **multipart** - Multipart upload. Upload both the media and its metadata, in a single request.\n- **resumable** - Resumable upload. Upload the file in a resumable fashion, using a series of at least two requests where the first request includes the metadata.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visibility",
            "description": "The visibility of the new file. This parameter is only relevant when convert=false.\n\nAcceptable values are:\n- **DEFAULT**: The visibility of the new file is determined by the user's default visibility/sharing policies. (default)\n- **PRIVATE**: The new file will be visible to only the owner.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "file-lib_raml.File"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file-lib_raml.DriveFile"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "corpus",
            "description": "The body of items (files/documents) to which the query applies.\n\nAcceptable values are:\n-**DEFAULT**: The items that the user has accessed.\n- **DOMAIN**: Items shared to the user's domain.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxResults",
            "description": "Maximum number of files to return. Acceptable values are `0` to `1000`, inclusive.\n(Default: 100)\n",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "orderBy",
            "description": "A comma-separated list of sort keys.\nValid keys are `createdDate`, `folder`, `lastViewedByMeDate`, `modifiedByMeDate`, `modifiedDate`, `quotaBytesUsed`, `recency`, `sharedWithMeDate`, `starred`, and `title`.\nEach key sorts ascending by default, but may be reversed with the `desc` modifier.\nExample usage: `?orderBy=folder,modifiedDate desc,title`.\n\nPlease note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageToken",
            "description": "Page token for files.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "description": "Query string for searching files.\nSee [Searching for files](docs/searching-for-files.md) for more information about supported fields and operations.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "spaces",
            "description": "A comma-separated list of spaces to query. Supported values are `drive`, `appDataFolder` and `photos`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file-lib_raml.FileList"
                }
              }
            }
          }
        }
      }
    },
    "/files/trash": {
      "delete": {
        "operationId": "Custom",
        "responses": {}
      }
    },
    "/files/{fileId}": {
      "parameters": [
        {
          "name": "fileId",
          "description": "The ID for the file in question.",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "acknowledgeAbuse",
            "description": "Whether the user is acknowledging the risk of downloading known malware or other abusive files. (Default: false)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "projection",
            "description": "This parameter is deprecated and has no function.\n\nAcceptable values are:\n\"BASIC\": Deprecated\n\"FULL\": Deprecated\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revisionId",
            "description": "Specifies the Revision ID that should be downloaded. Ignored unless alt=media is specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateViewedDate",
            "description": "Whether to update the view date after successfully retrieving the file. (Default: false)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file-lib_raml.DriveFile"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "addParents",
            "description": "Comma-separated list of parent IDs to add.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modifiedDateBehavior",
            "description": "Determines the behavior in which modifiedDate is updated. This overrides setModifiedDate.\n\nAcceptable values are:\n- \"fromBody\": Set modifiedDate to the value provided in the body of the request. No change if no value was provided.\n- \"fromBodyIfNeeded\": Set modifiedDate to the value provided in the body of the request depending on other contents of the update.\n- \"fromBodyOrNow\": Set modifiedDate to the value provided in the body of the request, or to the current time if no value was provided.\n- \"noChange\": Maintain the previous value of modifiedDate.\n- \"now\": Set modifiedDate to the current time.\n- \"nowIfNeeded\": Set modifiedDate to the current time depending on contents of the update.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newRevision",
            "description": "Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous revisions are preserved (causing increased use of the user's data storage quota). (Default: true)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "removeParents",
            "description": "Comma-separated list of parent IDs to remove.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setModifiedDate",
            "description": "Whether to set the modified date with the supplied modified date. (Default: false)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "updateViewedDate",
            "description": "Whether to update the view date after successfully updating the file. (Default: true)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "file-lib_raml.DriveFile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file-lib_raml.DriveFile"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "uploadType",
            "description": "The type of upload request to the /upload URI. Acceptable values are:\nmedia - Simple upload. Upload the media only, without any metadata.\nmultipart - Multipart upload. Upload both the media and its metadata, in a single request.\nresumable - Resumable upload. Upload the file in a resumable fashion, using a series of at least two requests where the first request includes the metadata.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addParents",
            "description": "Comma-separated list of parent IDs to add.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newRevision",
            "description": "Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous revisions are preserved (causing increased use of the user's data storage quota). (Default: true)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "removeParents",
            "description": "Comma-separated list of parent IDs to remove.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setModifiedDate",
            "description": "Whether to set the modified date with the supplied modified date. (Default: false)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "updateViewedDate",
            "description": "Whether to update the view date after successfully updating the file. (Default: true)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "file-lib_raml.File"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file-lib_raml.DriveFile"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Custom",
        "responses": {}
      }
    },
    "/files/{fileId}/comments": {
      "get": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "updatedMin",
            "description": "Only discussions that were updated after this timestamp will be returned. Formatted as an RFC 3339 timestamp.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "comment-lib_raml.CommentList"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "comment-lib_raml.CommentWritable"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "comment-lib_raml.Comment"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}/comments/{commentId}": {
      "parameters": [
        {
          "name": "commentId",
          "description": "The ID of the comment.",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "includeDeleted",
            "description": "If set, this will succeed when retrieving a deleted comment, and will include any deleted replies. (Default: false)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "comment-lib_raml.Comment"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "comment-lib_raml.CommentWritable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "comment-lib_raml.Comment"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Custom",
        "responses": {}
      },
      "patch": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "comment-lib_raml.CommentWritable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "comment-lib_raml.Comment"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}/comments/{commentId}/replies": {
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "comment-lib_raml.ReplyList"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "comment-lib_raml.ReplyWritable"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "comment-lib_raml.Reply"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}/comments/{commentId}/replies/{replyId}": {
      "parameters": [
        {
          "name": "replyId",
          "description": "The ID of the reply.",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "includeDeleted",
            "description": "If set, this will succeed when retrieving a deleted reply. (Default: false)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "comment-lib_raml.Reply"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "comment-lib_raml.ReplyWritable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "comment-lib_raml.Reply"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Custom",
        "responses": {}
      },
      "patch": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "comment-lib_raml.ReplyWritable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "comment-lib_raml.Reply"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}/parents": {
      "post": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "parent-lib_raml.Parent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "parent-lib_raml.Parent"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "parent-lib_raml.ParentList"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}/parents/{parentId}": {
      "parameters": [
        {
          "name": "parentId",
          "description": "The ID of the parent.",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "parent-lib_raml.Parent"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Custom",
        "responses": {}
      }
    },
    "/files/{fileId}/permissions": {
      "post": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "emailMessage",
            "description": "A custom message to include in notification emails.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sendNotificationEmails",
            "description": "Whether to send notification emails when sharing to users or groups. This parameter is ignored and an email is sent if the role is owner. (Default: true)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "permission-lib_raml.PermissionInsert"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "permission-lib_raml.Permission"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "permission-lib_raml.PermissionList"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}/permissions/{permissionId}": {
      "parameters": [
        {
          "name": "permissionId",
          "description": "The ID for the permission.",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "permission-lib_raml.Permission"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "transferOwnership",
            "description": "Whether changing a role to 'owner' should also downgrade the current owners to writers. (Default: false)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "removeExpiration",
            "description": "Whether to remove the expiration date.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "permission-lib_raml.PermissionInsert"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "permission-lib_raml.Permission"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Custom",
        "responses": {}
      },
      "patch": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "transferOwnership",
            "description": "Whether changing a role to 'owner' should also downgrade the current owners to writers. (Default: false)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "removeExpiration",
            "description": "Whether to remove the expiration date.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "permission-lib_raml.PermissionInsert"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "permission-lib_raml.Permission"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}/properties": {
      "post": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "properties-lib_raml.Property"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "properties-lib_raml.Property"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "properties-lib_raml.PropertyList"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}/properties/{propertyKey}": {
      "parameters": [
        {
          "name": "propertyKey",
          "description": "The key of the property.",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "properties-lib_raml.Property"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "properties-lib_raml.Property"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "properties-lib_raml.Property"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Custom",
        "responses": {}
      },
      "patch": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "properties-lib_raml.Property"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "properties-lib_raml.Property"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}/realtime": {
      "put": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "uploadType",
            "description": "The type of upload request to the /upload URI. Acceptable values are:\n\n- **media** - Simple upload. Upload the media data.\n- **resumable** - Resumable upload. Upload the file in a resumable fashion, using a series of at least two requests.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseRevision",
            "description": "The revision of the model to diff the uploaded model against. If set, the uploaded model is diffed against the provided revision and those differences are merged with any changes made to the model after the provided revision. If not set, the uploaded model replaces the current model on the server.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {}
      },
      "get": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "revision",
            "description": "The revision of the Realtime API data model to export. Revisions start at 1 (the initial empty data model) and are incremented with each change. If this parameter is excluded, the most recent data model will be returned.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/files/{fileId}/revisions/{revisionId}": {
      "parameters": [
        {
          "name": "revisionId",
          "description": "The ID of the revision.",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "revision-lib_raml.Revision"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "revision-lib_raml.Revision"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Custom",
        "responses": {}
      },
      "patch": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "revision-lib_raml.Revision"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "revision-lib_raml.Revision"
                }
              }
            }
          }
        }
      }
    },
    "/files/{folderId}/children": {
      "post": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "child-lib_raml.Child"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "child-lib_raml.Child"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "maxResults",
            "description": "Maximum number of children to return. Acceptable values are 0 to 1000, inclusive. (Default: 100)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "description": "Page token for children.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "description": "Query string for searching children. See Searching for files for more information about supported fields and operations.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "child-lib_raml.ChildrenList"
                }
              }
            }
          }
        }
      }
    },
    "/files/{folderId}/children/{childId}": {
      "parameters": [
        {
          "name": "childId",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "child-lib_raml.ChildrenList"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Custom",
        "responses": {}
      }
    },
    "/teamdrives": {
      "post": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "requestId",
            "description": "An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a Team Drive.\nA repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same Team Drive.\nIf the Team Drive already exists a 409 error will be returned.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "!include data_model_f5b3d04a078ad6db60d2b09d6108e4da.json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "!include data_model_f5b3d04a078ad6db60d2b09d6108e4da.json"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "maxResults",
            "description": "Maximum number of Team Drives to return.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "description": "Page token for Team Drives.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "!include data_model_61c1f4b1a02b26a7de7a57ca62386b58.json"
                }
              }
            }
          }
        }
      }
    },
    "/teamdrives/{teamDriveId}": {
      "parameters": [
        {
          "name": "teamDriveId",
          "description": "The ID of the Team Drive",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "!include data_model_f5b3d04a078ad6db60d2b09d6108e4da.json"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Custom",
        "responses": {}
      },
      "put": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "!include data_model_f5b3d04a078ad6db60d2b09d6108e4da.json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "!include data_model_f5b3d04a078ad6db60d2b09d6108e4da.json"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}/copy": {
      "post": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "file-lib_raml.File"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file-lib_raml.DriveFile"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}/revisions": {
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "revision-lib_raml.RevisionList"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}/touch": {
      "post": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "schema190"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file-lib_raml.DriveFile"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}/trash": {
      "post": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "schema194"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file-lib_raml.DriveFile"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}/untrash": {
      "post": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "file-lib_raml.DriveFile"
                }
              }
            }
          }
        }
      }
    },
    "/apps": {
      "get": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "appFilterExtensions",
            "description": "A comma-separated list of file extensions for open with filtering. All apps within the given app query scope which can open any of the given file extensions will be included in the response. If appFilterMimeTypes are provided as well, the result is a union of the two resulting app lists.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appFilterMimeTypes",
            "description": "A comma-separated list of MIME types for open with filtering. All apps within the given app query scope which can open any of the given MIME types will be included in the response. If appFilterExtensions are provided as well, the result is a union of the two resulting app lists.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "description": "A language or locale code, as defined by BCP 47, with some extensions from the Unicode LDML format.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "app-lib_raml.AppList"
                }
              }
            }
          }
        }
      }
    },
    "/changes": {
      "get": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "includeSubscribed",
            "description": "Whether to include public files the user has opened and shared files.\nWhen set to false, the list only includes owned files plus any shared or public\nfiles the user has explicitly added to a folder they own.\n",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "startChangeId",
            "description": "Change ID to start listing changes from.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "spaces",
            "description": "A comma-separated list of spaces to query. Supported values are:\n\n- **drive**\n- **appDataFolder**\n- **photos**\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "watch-lib_raml.ChangeList"
                }
              }
            }
          }
        }
      }
    },
    "/channels/stop": {
      "post": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "!include data_model_7ae585213a07a5dcb30b53c709ad9318.json"
              }
            }
          }
        },
        "responses": {}
      }
    },
    "/permissionIds/{email}": {
      "parameters": [
        {
          "name": "email",
          "description": "The email address for which to return a permission ID",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "permission-lib_raml.PermissionId"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "schema190": {},
      "schema194": {}
    }
  },
  "x-amf-uses": {
    "permission-lib_raml": "data_model_593684c070b64fab1d3aa1935ab00b84.json",
    "watch-lib_raml": "data_model_9dbbc0befc67926a1065fa327626eaa2.json",
    "about-lib_raml": "data_model_1334eeed845b2be26327e365f33f88b2.json",
    "parent-lib_raml": "data_model_3e3b689bf696535cc5503b190ae984ad.json",
    "app-lib_raml": "data_model_8539ebf74090a7f3db3b9fb529d30ffe.json",
    "child-lib_raml": "data_model_a170f1503774e31ce8371754e1a7fb57.json",
    "file-lib_raml": "data_model_38555d5e1d9995ba31e2be10d92f5155.json",
    "properties-lib_raml": "data_model_727384b6ec7fabcf5a4643e0968135d1.json",
    "revision-lib_raml": "data_model_96653e71dc199c5701bc88d16a0a6814.json",
    "comment-lib_raml": "data_model_e445356e63748d15ee25bacd5d29d765.json"
  }
}
