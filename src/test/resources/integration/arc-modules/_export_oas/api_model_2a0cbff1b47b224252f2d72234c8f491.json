{
  "openapi": "3.0.0",
  "info": {
    "title": "arc-api.raml",
    "version": "1.0"
  },
  "paths": {
    "/.well-known/acme-challenge/{challenge}": {
      "parameters": [
        {
          "name": "challenge",
          "description": "A challenge code",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/query/daily": {
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "DefaultPayload_3779ea6eda3e6b090e9e0582aa1d5261"
                }
              }
            }
          }
        }
      }
    },
    "/auth/token": {
      "post": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "Entity12"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "default"
                }
              }
            }
          }
        }
      }
    },
    "/modules": {
      "post": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "modules-types_raml.Module"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "modules-types_raml.Response Module"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "Custom",
        "parameters": [
          {
            "name": "q",
            "description": "A query for filtering the modules results. See the \"Search for modules\" documentation guide for the supported syntax.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "description": "Type of the module. It can be either `extension` or `theme`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "description": "A sort property. By default it is module creation `time` in descending order.\nOther properties are `stars` and `downloads` as a number of downloads of the module.\n\nWith the property you may specify direction as either `desc` or `asc`. If not specified, `desc` is assumed.\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {}
      }
    },
    "/modules/{moduleId}": {
      "parameters": [
        {
          "name": "moduleId",
          "description": "ID of the module.",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "modules-types_raml.Response Module"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "modules-types_raml.Module"
              }
            }
          }
        },
        "responses": {}
      },
      "delete": {
        "operationId": "Custom",
        "responses": {}
      }
    },
    "/modules/{moduleId}/star": {
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "modules-types_raml.Response Module"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "schema23"
              }
            }
          }
        },
        "responses": {}
      },
      "delete": {
        "operationId": "Custom",
        "responses": {}
      }
    },
    "/tasks/{scope}/{type}": {
      "parameters": [
        {
          "name": "type",
          "description": "Type of the data to compute. Can be either `users` to compute number of users for given scope and `sessions` to compute number of sessions.\n",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "scope",
          "description": "The time scope of computation to perform. It can be either `daily`, `weekly` or `monthly`.\n\nExcept for the daily type, actual start date may be different than the one provided in the `day` query parameter.\nFor weekly computations the server will always set monday going backward if the day is not Monday.\nSimilar for monthly computations it will be always set to the first day of month.\n",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "DefaultPayload_b43baf4864e1803101a485ac709f9468"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "description": "User id which is a `ref` property from user response object.\n",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "modules-types_raml.Person response object"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/query/{scope}": {
      "parameters": [
        {
          "name": "scope",
          "description": "A time period for the statistics. Only `weekly` and `monthly` values are allowed.\n",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "DefaultPayload_4b4b16eef65c3a14ed111af141db8d22"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/query": {
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "DefaultPayload_889639457bfca5c34db982266fd00d1f"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/record": {
      "post": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "Entity9"
              }
            }
          }
        },
        "responses": {}
      }
    },
    "/analyzer": {
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "DefaultPayload_89d13c80c468be2da95546dc5b4272e4"
                }
              }
            }
          }
        }
      }
    },
    "/auth": {
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "DefaultPayload_29485553cc4a384ef298a9c5da94b217"
                }
              }
            }
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "DefaultPayload_b43baf4864e1803101a485ac709f9468"
                }
              }
            }
          }
        }
      }
    },
    "/updates": {
      "post": {
        "operationId": "Custom",
        "requestBody": {
          "content": {
            "null": {
              "schema": {
                "$ref": "Entity34"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Entity36"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "operationId": "Custom",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "DefaultPayload_310c4e515705441c2564941924d9b5c1"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Entity34": {
        "type": "object",
        "required": [
          "version",
          "modules"
        ],
        "properties": {
          "version": {
            "type": "string"
          },
          "modules": {
            "type": "array",
            "items": {
              "$ref": "modules-types_raml.ModuleInfo"
            }
          }
        }
      },
      "DefaultPayload_889639457bfca5c34db982266fd00d1f": {},
      "schema23": {},
      "DefaultPayload_3779ea6eda3e6b090e9e0582aa1d5261": {},
      "DefaultPayload_b43baf4864e1803101a485ac709f9468": {},
      "DefaultPayload_310c4e515705441c2564941924d9b5c1": {},
      "Entity12": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          }
        }
      },
      "default": {
        "type": "object",
        "required": [
          "authToken"
        ],
        "properties": {
          "authToken": {
            "type": "string"
          }
        }
      },
      "DefaultPayload_89d13c80c468be2da95546dc5b4272e4": {},
      "DefaultPayload_4b4b16eef65c3a14ed111af141db8d22": {},
      "Entity36": {
        "description": "Created module.",
        "type": "object",
        "required": [
          "upgrades"
        ],
        "properties": {
          "upgrades": {
            "type": "array",
            "items": {
              "$ref": "modules-types_raml.Response Module"
            }
          }
        }
      },
      "DefaultPayload_29485553cc4a384ef298a9c5da94b217": {},
      "Entity9": {
        "description": "The request body can be easily created in JavaScript using FormData:\n\n```\nlet data = new FormData();\ndata.append('aid', aid); // anonymousId\ndata.append('tz', d.getTimezoneOffset()); //timezone\n```\nand then passed to XHR or Fetch function as a parameter:\n```\nfetch(url, {\n  method: 'POST',\n  body: data\n});\n```\n",
        "type": "object",
        "required": [
          "aid",
          "tz"
        ],
        "properties": {
          "aid": {
            "type": "string"
          },
          "tz": {
            "type": "integer"
          }
        }
      }
    }
  },
  "x-amf-uses": {
    "modules-types_raml": "data_model_c66fede8f0506eb3783e626f680e727b.json"
  }
}
