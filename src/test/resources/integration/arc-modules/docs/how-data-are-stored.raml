#%RAML 1.0 DocumentationItem

title: How data are stored
content: |
  # How data are stored
  
  The analitics data are stored in two stores: `User` and `Session` in the `analytics` namespace.
  
  Each time rhe user runs the ARC app it sends a "ping" to analytical server. The ping include
  **anonymized application ID**. The anonymized application ID is an application ID that is always 
  generated on client side after the installation and before first request to the analytics 
  endpoint transformed to another string that can't be reversed to the original string.
  
  Anonymized ID can only be used in analytics service. Unlike application ID which can be used to 
  store user data on the server it must not be connected to any instance of the app directly or not
  directly. Meaning, the server can't know who is sending the data.
  
  ## User store
  Data is Users store represent a single application run for given day.
  
  The key for the entity is combined with anonymized application ID and day represented in "YYYYMMdd" 
  format.
  
  ```
  SimpleDateFormat df = new SimpleDateFormat("YYYYMMdd", Locale.UK);
  String day = df.format(new Date());
  String key = applicationId + "/" + day;
  ```
  
  The entity also contains `appId` which is anonymized application ID and `day` which is current 
  timestamp.
  
  This information is enought to prform following queries:
  
  - get user for today
    
    This is a simple get operation from the datastore for generated key.
    
  - query for users for given time period.
  
    This is more complex task. More efficient way in terms of read cost from the datastore is to 
    perform a key query (only key is returned) and compute number of unique users from the results.
    
    It can be done by requesting distinct appId dor date range but 1) it will require to add index
    to `appId` field which will increase number of writes to the datastore (and therefore overall 
    cost of the datastore) and reads (because it will need to readd all this data from the 
    datastore).
    
  ## Session store
  Unlike `Users` store, this will use autogenerated key.
  
  The `Session` entity contains `appId` which is the anonymized application id, `day` which is the 
  timestamp when the record has been created and `lastActive` which is the timestamp when the user
  send the analytical data to server when previous session was still active.
  
  **Note**: session can only be extended to midnight the same day when it was created. After that 
  new session will be always created.
  
  This store contains to indexes:
  
  1) appId asc, lastActive desc
  2) day asc
  
  Overall number of writes to this datastore is 10.
  
  When querying for active session for the given application ID it creates a query where `appId`
  equals application ID and `lastActive` is equal or grather than current timestamp minus 30 minutes
  (represented in milliseconds). The query is limited to one record and is sorted by `lastActive` 
  in descending order. 
  
  If no records were found new Session entity is created. Otherwise `lastActive` property is updated
  to current server time.
  
  Queries for date range are key cursors (only keys are received from the datastore) and the number 
  of sessions is the number of keys returned in the query.
  
  
  ## Agregated data
  AppEngine's cron is set to schedule a analytics tasks every 24 hours. The actual time of execution 
  may vary depending on server load.
  
  When the cron job runs then it will always schedule (will add to task queue) a task to compute 
  data for day before. 
  If current day is Monday then it also schedult a weekly task. If today is the first day of month 
  then monthly task will be scheduled.
  
  Tasks will be scheduled for execution right away. They may wait if there are other tasks in the 
  queue.
  
  If the program will be able to compute data in 10 minutes then it will save results in 
  corresponding to the task type entity group. Otherwise it will try save results in the memecache 
  (with current cursor value) and will try to restart the job from previous point.
  
  Read of computed data is only to query aggregated data for given periods.
  
  **Note**: Because the analytics service works as described only data for single day, weekly from
  Monday to Sunday and monthly from the first day of month to the last day of month are available.
  It is not possible to read the results for two weeks for example.