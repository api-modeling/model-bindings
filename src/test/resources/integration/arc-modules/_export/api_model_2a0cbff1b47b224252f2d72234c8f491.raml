#%RAML 1.0
types:
  default_d2fdc:
    type: modules-types_raml.Person response object
    properties: {}
  "":
    type: any
  Entity34:
    description: Created module.
    properties:
      upgrades:
        items: modules-types_raml.Response Module
  DefaultPayload_889639457bfca5c34db982266fd00d1f:
    type: any
  DefaultPayload_3779ea6eda3e6b090e9e0582aa1d5261:
    type: any
  DefaultPayload_b43baf4864e1803101a485ac709f9468:
    type: any
  _0a791:
    type: any
  DefaultPayload_310c4e515705441c2564941924d9b5c1:
    type: any
  Entity18:
    description: Created module.
    type: modules-types_raml.Response Module
    properties: {}
  Entity19:
    type: modules-types_raml.Response Module
    properties: {}
  Entity16:
    description: Creates a new module.
    type: modules-types_raml.Module
    properties: {}
  Entity21:
    type: modules-types_raml.Module
    properties: {}
  Entity12:
    properties:
      code:
        type: string
  default:
    properties:
      authToken:
        type: string
  Entity32:
    properties:
      version:
        type: string
      modules:
        items: modules-types_raml.ModuleInfo
  DefaultPayload_89d13c80c468be2da95546dc5b4272e4:
    type: any
  DefaultPayload_4b4b16eef65c3a14ed111af141db8d22:
    type: any
  DefaultPayload_29485553cc4a384ef298a9c5da94b217:
    type: any
  Entity9:
    description: |
      The request body can be easily created in JavaScript using FormData:

      ```
      let data = new FormData();
      data.append('aid', aid); // anonymousId
      data.append('tz', d.getTimezoneOffset()); //timezone
      ```
      and then passed to XHR or Fetch function as a parameter:
      ```
      fetch(url, {
        method: 'POST',
        body: data
      });
      ```
    properties:
      aid:
        type: string
      tz:
        type: integer
uses:
  modules-types_raml: data_model_c66fede8f0506eb3783e626f680e727b.raml
title: arc-api.raml
/analyzer:
  get:
    displayName: Custom
    responses:
      "200":
        body:
          application/json: DefaultPayload_89d13c80c468be2da95546dc5b4272e4
/auth:
  get:
    displayName: Custom
    responses:
      "200":
        body:
          application/json: DefaultPayload_29485553cc4a384ef298a9c5da94b217
/modules:
  post:
    displayName: Custom
    body: Entity16
    responses:
      "200":
        body:
          application/json: Entity18
  get:
    displayName: Custom
    queryParameters:
      q?:
        description: A query for filtering the modules results. See the "Search for modules" documentation guide for the supported syntax.
        type: string
      type?:
        description: Type of the module. It can be either `extension` or `theme`.
        type: string
      orderBy?:
        description: |
          A sort property. By default it is module creation `time` in descending order.
          Other properties are `stars` and `downloads` as a number of downloads of the module.

          With the property you may specify direction as either `desc` or `asc`. If not specified, `desc` is assumed.
        type: string
/tasks:
  get:
    displayName: Custom
    responses:
      "200":
        body:
          application/json: DefaultPayload_b43baf4864e1803101a485ac709f9468
/updates:
  post:
    displayName: Custom
    body: Entity32
    responses:
      "200":
        body:
          application/json: Entity34
/users:
  get:
    displayName: Custom
    responses:
      "200":
        body:
          application/json: DefaultPayload_310c4e515705441c2564941924d9b5c1
/analytics/query:
  get:
    displayName: Custom
    responses:
      "200":
        body:
          application/json: DefaultPayload_889639457bfca5c34db982266fd00d1f
/analytics/record:
  post:
    displayName: Custom
    body: Entity9
/auth/token:
  post:
    displayName: Custom
    body: Entity12
    responses:
      "200":
        body:
          application/json: default
/modules/{moduleId}:
  get:
    displayName: Custom
    responses:
      "200":
        body:
          application/json: Entity19
  put:
    displayName: Custom
    body: Entity21
  delete:
    displayName: Custom
  uriParameters:
    moduleId:
      description: ID of the module.
      type: string
/users/{userId}:
  get:
    displayName: Custom
    responses:
      "200":
        body:
          application/json: default
  uriParameters:
    userId:
      description: |
        User id which is a `ref` property from user response object.
      type: string
/.well-known/acme-challenge/{challenge}:
  get:
    displayName: Custom
    responses:
      "200":
        body:
          text/html:
            type: string
  uriParameters:
    challenge:
      description: A challenge code
      type: string
/analytics/query/daily:
  get:
    displayName: Custom
    responses:
      "200":
        body:
          application/json: DefaultPayload_3779ea6eda3e6b090e9e0582aa1d5261
/analytics/query/{scope}:
  get:
    displayName: Custom
    responses:
      "200":
        body:
          application/json: DefaultPayload_4b4b16eef65c3a14ed111af141db8d22
  uriParameters:
    scope:
      description: |
        A time period for the statistics. Only `weekly` and `monthly` values are allowed.
      type: string
/modules/{moduleId}/star:
  get:
    displayName: Custom
    responses:
      "200":
        body:
          application/json: Entity19
  post:
    displayName: Custom
    body: ""
  delete:
    displayName: Custom
/tasks/{scope}/{type}:
  get:
    displayName: Custom
    responses:
      "200":
        body:
          application/json: DefaultPayload_b43baf4864e1803101a485ac709f9468
  uriParameters:
    type:
      description: |
        Type of the data to compute. Can be either `users` to compute number of users for given scope and `sessions` to compute number of sessions.
      type: string
    scope:
      description: |
        The time scope of computation to perform. It can be either `daily`, `weekly` or `monthly`.

        Except for the daily type, actual start date may be different than the one provided in the `day` query parameter.
        For weekly computations the server will always set monday going backward if the day is not Monday.
        Similar for monthly computations it will be always set to the first day of month.
      type: string
